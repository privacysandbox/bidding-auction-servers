#!/bin/bash

# Having issues with servers failing init? On the EC2 instance,
# you can find log outputs for this script via:
# sudo cat /var/log/cloud-init-output.log

set -x

if [[ "${service}" == "sfe" ]]; then
  # Start Envoy before the nitro allocator service.
  # Otherwise, Envoy segfaults.
  # See b/276754615 for more detail.
  # TODO(b/276754615): Update after envoy fixes its bug.
  docker run --rm \
    --network host \
    -v /etc/envoy:/etc/envoy \
    envoyproxy/envoy-distroless-dev:e0cc4306253f0318f9dcbc77cf32feb6245c378f \
    --config-path /etc/envoy/envoy.yaml \
    -l info &
  # Ping Envoy until it's ready. Silent fail otherwise --
  # load balancer health checks will eventually kill this instance.
  curl --retry 6 --retry-all-errors localhost:9902/ready
fi

if [[ -n "${app_mesh_name}" && -n "${virtual_node_name}" ]]; then
  # Authenticate with the Envoy Amazon ECR repository in the Region that you want
  # your Docker client to pull the image from.
  aws ecr get-login-password \
    --region ${region} |
    docker login \
      --username AWS \
      --password-stdin 840364872350.dkr.ecr.${region}.amazonaws.com

  # Start the App Mesh Envoy container.
  sudo docker run --detach --env APPMESH_RESOURCE_ARN=mesh/${app_mesh_name}/virtualNode/${virtual_node_name} \
    -v /tmp:/tmp \
    -u 1337 --network host public.ecr.aws/appmesh/aws-appmesh-envoy:v1.29.4.0-prod
fi

# Install grpcurl
cd /tmp
wget -q https://github.com/fullstorydev/grpcurl/releases/download/v1.9.1/grpcurl_1.9.1_linux_amd64.rpm
sudo rpm -i grpcurl_1.9.1_linux_amd64.rpm
cd -

# Grab the metadata needed for registering instance.
# https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
IP_ADDRESS=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

if [[ -n "${cloud_map_service_id}" && -n "${region}" ]]; then
  # Actually register the present EC2 with the cloud map.
  register_instance_out=$(aws servicediscovery register-instance \
    --service-id ${cloud_map_service_id} \
    --instance-id $INSTANCE_ID \
    --attributes "AWS_INSTANCE_IPV4="$IP_ADDRESS \
    --region ${region} 2>&1)
  while [[ "$?" -gt 0 ]] && [[ "$register_instance_out" =~ "not authorized to perform" ]]; do
    echo "Registering service instance failed ... This can be transient and thus trying again in 2 seconds"
    echo "Observed failure: $register_instance_out"
    sleep 2
    register_instance_out=$(aws servicediscovery register-instance \
      --service-id ${cloud_map_service_id} \
      --instance-id $INSTANCE_ID \
      --attributes "AWS_INSTANCE_IPV4="$IP_ADDRESS \
      --region ${region} 2>&1)
  done
fi

if [[ -n "${app_mesh_name}" && -n "${virtual_node_name}" && -n "${cloud_map_service_id}" && -n "${region}" ]]; then
  echo "Will wait for service mesh envoy proxy to come up"
  while [ "$(curl localhost:9901/ready)" != "LIVE" ]; do
    echo "Service mesh envoy proxy is not ready.. will check again in 1 second"
    sleep 1
  done
fi

# Make sure nitro enclave allocator service is stopped
systemctl stop nitro-enclaves-allocator.service

# Allocate resources available to enclave
declare -r -x ALLOCATOR_YAML=/etc/nitro_enclaves/allocator.yaml
cat >"$${ALLOCATOR_YAML}" <<EOF
---
# How much memory to allocate for enclaves (in MiB).
memory_mib: ${enclave_memory_mib}
# How many CPUs to reserve for enclaves.
cpu_count: ${enclave_cpu_count}
EOF

# Start nitro enclave service
systemctl start nitro-enclaves-allocator.service
systemctl enable nitro-enclaves-allocator.service

# Start the SCP nitro aws proxy service
systemctl start vsockproxy.service
systemctl enable vsockproxy.service

# Update otel collector config
sed -i -e 's/$SERVICE/'${service}'/g' /opt/privacysandbox/otel_collector_config.yaml
sed -i -e 's/$S3_REGION/'${region}'/g' /opt/privacysandbox/otel_collector_config.yaml
sed -i -e 's/$S3_BUCKET/'${consented_request_s3_bucket}'/g' /opt/privacysandbox/otel_collector_config.yaml
sed -i -e 's/$S3_PREFIX/'${s3_prefix}'/g' /opt/privacysandbox/otel_collector_config.yaml
sed -i -e 's/$FILE_PREFIX/'${file_prefix}'/g' /opt/privacysandbox/otel_collector_config.yaml

# Start the otel collector
sudo systemctl restart otelcol-contrib

if [[ "${enclave_debug_mode}" == "true" ]]; then
  # Create cloudwatch config
  cat <<EOF >"/amazon-cloudwatch-agent.json"
{
  "agent": {
    "metrics_collection_interval": 10
  },
  "logs": {
    "logs_collected": {
      "files": {
        "collect_list": [
          {
            "file_path": "${enclave_log_path}",
            "log_group_name": "${service}-tee-logs",
            "log_stream_name": "${environment}-$INSTANCE_ID",
            "timestamp_format": "%Y-%m-%d %H:%M:%S"
          }
        ]
      }
    }
  }
}
EOF

  # Start cloudwatch
  sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
    -a fetch-config -m ec2 \
    -c file:/amazon-cloudwatch-agent.json -s

  nitro-cli run-enclave \
    --cpu-count ${enclave_cpu_count} --memory ${enclave_memory_mib} \
    --eif-path /opt/privacysandbox/server_enclave_image.eif \
    --enclave-cid 16 --attach-console >${enclave_log_path} &
else
  nitro-cli run-enclave \
    --cpu-count ${enclave_cpu_count} --memory ${enclave_memory_mib} \
    --eif-path /opt/privacysandbox/server_enclave_image.eif \
    --enclave-cid 16 &
fi

SECONDS_TRIED=0

echo "Will wait for ${healthcheck_grace_period_sec} seconds for the service to come up"
while ! grpcurl --plaintext localhost:50051 list; do
  echo "Service/Vsock proxy is not reachable.. will retry in 1 second"
  ((SECONDS_TRIED++))
  if (( SECONDS_TRIED > ${healthcheck_grace_period_sec} ))
  then
    echo "Timing out: tried for ${healthcheck_grace_period_sec} seconds and the service and its vsock proxy are still not reachable."
    break
  fi
  sleep 1
done

if [[ -n "${app_mesh_name}" && -n "${virtual_node_name}" && -n "${cloud_map_service_id}" && -n "${region}" ]]; then
  bash /opt/privacysandbox/hc.bash -p /opt/privacysandbox -n health.proto -a localhost:50051 -i ${healthcheck_interval_sec} -t ${healthcheck_timeout_sec} -h ${healthcheck_healthy_threshold} -u ${healthcheck_unhealthy_threshold} -e $INSTANCE_ID -g 0 -r ${region} -s ${cloud_map_service_id} &

  # Run Cloud Un-Map to catch and de-register any instances shut down by EC2 ASG HCs, or which otherwise did not de-register themselves.
  sudo docker run --detach spreaker/aws-cloud-unmap --service-id ${cloud_map_service_id} --service-region ${region} --instances-region ${region}

  echo "Setting up iptables to route traffic via service mesh / envoy"
  sudo bash -x /opt/privacysandbox/envoy_networking.sh -s ${service}
fi
