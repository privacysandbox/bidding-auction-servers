#!/usr/bin/env bash
# Copyright 2024 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

print_usage() {
    cat << USAGE
Usage:
  <options>
  --build_image_uri <uri>                If you build on a different machine and store your local testing images in a private registry, specify the uri of the image
  -h, --help                             Print usage information
USAGE
    exit 0
}

source $(dirname "$0")/common

declare BUILD_IMAGE_URI=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --build_image_uri)
      BUILD_IMAGE_URI="$2"
      shift 2
      ;;
    -h | --help) print_usage ;;
    *) print_usage ;;
  esac
done

AUCTION_SERVER_ADDR="${AUCTION_SERVER_ADDR:-127.0.0.1:${AUCTION_PORT}}"
KEY_VALUE_SIGNALS_ADDR="${KEY_VALUE_SIGNALS_ADDR:-}"
TRUSTED_KEY_VALUE_V2_SIGNALS_ADDR="${TRUSTED_KEY_VALUE_V2_SIGNALS_ADDR:-}"
SELLER_ORIGIN_DOMAIN="${SELLER_ORIGIN_DOMAIN:-}"

BUYER_SERVER_ADDRS_JSON="${BUYER_SERVER_ADDRS_JSON:-$(cat << EOF
{
  "https://example-buyer-origin.com": {
    "url": "127.0.0.1:${BFE_PORT}",
    "cloudPlatform": "LOCAL"
  }
}
EOF
)}"

SERVICE_NAME=seller_frontend
BIN=${SERVICE_NAME}
if [[ -z $1 ]]; then
  # When we load from .tar file, we don't mount the binary
  # and it is embededd as "server"
  BIN="server"
fi

SERVER_START_CMD=$(cat << END
/server/bin/${BIN} \
--init_config_client="false" \
--port=${SFE_PORT} \
--https_fetch_skips_tls_verification="${SKIP_TLS_VERIFICATION}" \
--auction_server_host="${AUCTION_SERVER_ADDR}" \
--key_value_signals_host="${KEY_VALUE_SIGNALS_ADDR}" \
--trusted_key_value_v2_signals_host="${TRUSTED_KEY_VALUE_V2_SIGNALS_ADDR}" \
--scoring_signals_fetch_mode="${SCORING_SIGNALS_FETCH_MODE}" \
--seller_origin_domain="${SELLER_ORIGIN_DOMAIN}" \
"${SELLER_CODE_FETCH_CONFIG}" \
--seller_cloud_platforms_map='{"component-seller1.com":"GCP", "component-seller2.com":"AWS"}' \
--buyer_server_hosts='${BUYER_SERVER_ADDRS_JSON}' \
--enable_seller_frontend_benchmarking="true" \
--score_ads_rpc_timeout_ms=60000 \
--get_bid_rpc_timeout_ms=60000 --key_value_signals_fetch_rpc_timeout_ms 60000 \
--create_new_event_engine="false" \
--test_mode="true" \
--enable_chaffing="false" \
--enable_kanon=${ENABLE_KANON} \
--k_anon_api_key="PLACEHOLDER" \
--num_k_anon_shards="10" \
--num_non_k_anon_shards="10" \
--test_mode_k_anon_cache_ttl_ms="1" \
--test_mode_non_k_anon_cache_ttl_ms="1" \
--enable_k_anon_query_cache="true" \
--telemetry_config="${TELEMETRY_CONFIG}" \
--enable_otel_based_logging="true" \
--consented_debug_token="test_token" \
--ps_verbosity=${PS_VERBOSITY} \
--enable_protected_audience=${ENABLE_PROTECTED_AUDIENCE} \
--sfe_tcmalloc_background_release_rate_bytes_per_second=4096 \
--sfe_tcmalloc_max_total_thread_cache_bytes=10737418240 \
--enable_protected_app_signals=${ENABLE_PROTECTED_APP_SIGNALS} \
--enable_tkv_v2_browser=${ENABLE_TKV_V2_BROWSER} && exit
END
)

PROF_PORT="${PROF_PORT:-1234}"
run_server "$1" "${SERVICE_NAME}" "${SERVER_START_CMD}" "${PROF_PORT}"
if [[ $1 == "--gdb" ]]; then
  export PROJECT_ROOT=$(git rev-parse --show-toplevel)
  export EXTRA_DOCKER_RUN_ARGS=(
    "--volume=${PROJECT_ROOT}/bazel-bin/services/seller_frontend_service/server:/server/bin/server"
    "--name=sfe"
  )
  ${PROJECT_ROOT}/builders/tools/cbuild --seccomp-unconfined \
  --docker-network host --image build-debian \
  --cmd "apt-get update && apt-get -y install gdb && gdb -ex=r --args ${SERVER_START_CMD}"
else
  if [[ -n "${BUILD_IMAGE_URI}" ]]; then
    docker_image_uri="${BUILD_IMAGE_URI}"
  else
    docker_image_uri="$(docker load -i dist/debian/seller_frontend_service_image.tar | sed -nr "s/^Loaded image: (.*)$/\1/p")"
  fi
  docker run -it "${DOCKER_RUN_ARGS[@]}" "${docker_image_uri}" -c "${SERVER_START_CMD}"
fi
